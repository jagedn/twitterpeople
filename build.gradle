buildscript {
    ext {
        grailsVersion = project.grailsVersion
    }
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "org.grails.plugins:hibernate4:5.0.0"
        classpath "org.grails.plugins:views-gradle:1.0.1"
    }
}

//jorge 2
plugins {
    id "org.asciidoctor.convert" version "1.5.2"
}


version "0.1"
group "twitterpeople"

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"org.grails.grails-web"
apply plugin:"org.grails.plugins.views-json"

ext {
    grailsVersion = project.grailsVersion
    gradleWrapperVersion = project.gradleWrapperVersion

    // jorge 2
    springRestdocsVersion = '1.1.0.RC1' //''1.1.0.M1'
    snippetsDir = file('build/generated-snippets')
}

// jorge 2
test {
    outputs.dir snippetsDir
}

// jorge 3
integrationTest{
    outputs.upToDateWhen { false }

    outputs.dir snippetsDir

    systemProperty 'twitter4j.oauth.consumerKey',"${consumerKey}"
    systemProperty 'twitter4j.oauth.consumerSecret',"${consumerSecret}"
    systemProperty 'twitter4j.oauth.accessToken',"${accessToken}"
    systemProperty 'twitter4j.oauth.accessTokenSecret',"${secretToken}"
}

// jorge 2
asciidoctor {
    attributes 'snippets': snippetsDir,
            'source-highlighter':'prettify',
            'toc':'left',
            'setanchors':'true'
    inputs.dir snippetsDir
    dependsOn integrationTest
}


repositories {
    mavenLocal()
    maven { url "https://repo.grails.org/grails/core" }
}

dependencyManagement {
    imports {
        mavenBom "org.grails:grails-bom:$grailsVersion"
    }
    applyMavenExclusions false
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-plugin-url-mappings"
    compile "org.grails:grails-plugin-rest"
    compile "org.grails:grails-plugin-codecs"
    compile "org.grails:grails-plugin-interceptors"
    compile "org.grails:grails-plugin-services"
    compile "org.grails:grails-plugin-datasource"
    compile "org.grails:grails-plugin-databinding"
    compile "org.grails:grails-plugin-async"
    compile "org.grails:grails-web-boot"
    compile "org.grails:grails-logging"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:hibernate4"
    compile "org.hibernate:hibernate-ehcache"
    compile "org.grails.plugins:views-json"
    console "org.grails:grails-console"
    profile "org.grails.profiles:rest-api:3.1.1"
    runtime "com.h2database:h2"
    testCompile "org.grails:grails-plugin-testing"
    testCompile "org.grails.plugins:geb"
    testCompile "org.grails:grails-datastore-rest-client"
    testRuntime "org.seleniumhq.selenium:selenium-htmlunit-driver:2.47.1"
    testRuntime "net.sourceforge.htmlunit:htmlunit:2.18"

    //jorge
    compile "org.twitter4j:twitter4j-core:4.0.4"

    // jorge 2
    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile "org.springframework.restdocs:spring-restdocs-core:$springRestdocsVersion"
    testCompile "org.springframework.restdocs:spring-restdocs-restassured:$springRestdocsVersion"

}

task wrapper(type: Wrapper) {
    gradleVersion = gradleWrapperVersion
}

//jorge
bootRun {
    jvmArgs = [
            "-Dtwitter4j.oauth.consumerKey=${consumerKey}",
            "-Dtwitter4j.oauth.consumerSecret=${consumerSecret}",
            "-Dtwitter4j.oauth.accessToken=${accessToken}",
            "-Dtwitter4j.oauth.accessTokenSecret=${secretToken}"
    ]
}

// jorge 2
jar {
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}

assemble {
    def twitter4j = new File('build/libs/twitter4j.properties')
    twitter4j.text = """
oauth.consumerKey=${consumerKey}
oauth.consumerSecret=${consumerSecret}
oauth.accessToken=${accessToken}
oauth.accessTokenSecret=${secretToken}
    """
}